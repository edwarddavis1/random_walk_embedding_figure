** figure summary

A figure that shows how node2vec works. 
- Show how random walks are used to work out how similar two nodes are. To do this we show at least some random walks (which end in the neighbourhood being highlighted). 
- From the found neighbourhoods, we then see how the update function works; term one will bring the neighbours closer together and term two will push non-neighbours further away.

- If possible, it would be good to show every random walk/neighbourhood, and then have controls to either speed up or slow down the training (slower shows the random walks better, faster shows the training better).
	[Note this may be way too slow to be useful]


** Main parts
- Random walks
- Window
- Neighbourhoods
- Update (first term)
- Update (second term)


** Data needed
- Try store all the random walks (if not too much)
- Graph (ideally somewhat small - maybe just use harry potter)
- Embedding steps (from uniform to full embedding)
- Attributes: name, good/bad, house, degree

** How to make the random walking stuff


1. Need to label each edge, such that it lights up when looping through a random walk.
2. At the end of a random walk, having added each edge to a list, colour all edges within that list green or smthn. 
3. Repeat.

After this, add an update colour (same green) to the scatter (this will be different from the usual scatter).

	Will need the update from term 1 alone, and that of term 2.
	
	If this isn't possible, just show the full update :/		


** To do
- [X] Get the scatter working - go from uniform to trained.
- [X] Add legend
- [X] Add ability to change colour
- [ ] Continuous colour legend
- [ ] Add numbers back to the axes
- [X] Get one random walk working.
- [X] Label the random walks
- [ ] Get one full update
- [ ] Get all updates working
- [X] Add in speed controls
- [X] Reset button
